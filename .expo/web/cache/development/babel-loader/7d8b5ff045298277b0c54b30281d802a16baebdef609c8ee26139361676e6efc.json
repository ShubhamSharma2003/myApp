{"ast":null,"code":"import { NativeModule, registerWebModule } from 'expo-modules-core';\nimport ImageRefWeb from './web/ImageRef';\nclass ImageModule extends NativeModule {\n  static name = 'ExpoImage';\n  Image = ImageRefWeb;\n  async prefetch(urls, _, __) {\n    const urlsArray = Array.isArray(urls) ? urls : [urls];\n    return new Promise(resolve => {\n      let imagesLoaded = 0;\n      urlsArray.forEach(url => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => {\n          imagesLoaded++;\n          if (imagesLoaded === urlsArray.length) {\n            resolve(true);\n          }\n        };\n        img.onerror = () => resolve(false);\n      });\n    });\n  }\n  async clearMemoryCache() {\n    return false;\n  }\n  async clearDiskCache() {\n    return false;\n  }\n  async loadAsync(source) {\n    if (!source.uri) {\n      throw new Error('The image source must have the \"uri\" property defined');\n    }\n    const response = await fetch(source.uri, {\n      headers: source.headers\n    });\n    if (!response.ok) {\n      throw new Error(`Image request failed with the status code: ${response.status}`);\n    }\n    const blob = await response.blob();\n    const imageObjectUrl = URL.createObjectURL(blob);\n    const image = await loadImageElementAsync(imageObjectUrl);\n    return ImageRefWeb.init(imageObjectUrl, image.width, image.height, response.headers.get('Content-Type'));\n  }\n}\nasync function loadImageElementAsync(src) {\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img');\n    image.onload = () => resolve(image);\n    image.onerror = () => reject(new Error(`Unable to load the image from '${src}'`));\n    image.src = src;\n  });\n}\nexport default registerWebModule(ImageModule);","map":{"version":3,"names":["NativeModule","registerWebModule","ImageRefWeb","ImageModule","name","Image","prefetch","urls","_","__","urlsArray","Array","isArray","Promise","resolve","imagesLoaded","forEach","url","img","src","onload","length","onerror","clearMemoryCache","clearDiskCache","loadAsync","source","uri","Error","response","fetch","headers","ok","status","blob","imageObjectUrl","URL","createObjectURL","image","loadImageElementAsync","init","width","height","get","reject","document","createElement"],"sources":["/Users/shubhamsharma/Downloads/newApp/node_modules/expo-image/src/ImageModule.web.ts"],"sourcesContent":["import { NativeModule, registerWebModule } from 'expo-modules-core';\n\nimport type { ImageNativeModule, ImageRef, ImageSource } from './Image.types';\nimport ImageRefWeb from './web/ImageRef';\n\nclass ImageModule extends NativeModule implements ImageNativeModule {\n  // @ts-ignore: Overrides the built-in `Function.name` property\n  static name = 'ExpoImage';\n\n  Image: typeof ImageRef = ImageRefWeb;\n\n  async prefetch(urls: string | string[], _, __): Promise<boolean> {\n    const urlsArray = Array.isArray(urls) ? urls : [urls];\n\n    return new Promise<boolean>((resolve) => {\n      let imagesLoaded = 0;\n\n      urlsArray.forEach((url) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => {\n          imagesLoaded++;\n\n          if (imagesLoaded === urlsArray.length) {\n            resolve(true);\n          }\n        };\n        img.onerror = () => resolve(false);\n      });\n    });\n  }\n\n  async clearMemoryCache(): Promise<boolean> {\n    return false;\n  }\n\n  async clearDiskCache(): Promise<boolean> {\n    return false;\n  }\n\n  async loadAsync(source: ImageSource): Promise<ImageRef> {\n    if (!source.uri) {\n      // TODO: Add support for sources without the uri, e.g. blurhash and thumbhash.\n      throw new Error('The image source must have the \"uri\" property defined');\n    }\n    const response = await fetch(source.uri, {\n      headers: source.headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Image request failed with the status code: ${response.status}`);\n    }\n    const blob = await response.blob();\n    const imageObjectUrl = URL.createObjectURL(blob);\n    const image = await loadImageElementAsync(imageObjectUrl);\n\n    return ImageRefWeb.init(\n      imageObjectUrl,\n      image.width,\n      image.height,\n      response.headers.get('Content-Type')\n    );\n  }\n}\n\n/**\n * Helper that resolves to an `<img />` element once it finishes loading the given source.\n */\nasync function loadImageElementAsync(src: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img');\n\n    image.onload = () => resolve(image);\n    image.onerror = () => reject(new Error(`Unable to load the image from '${src}'`));\n    image.src = src;\n  });\n}\n\nexport default registerWebModule(ImageModule);\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,iBAAiB,QAAQ,mBAAmB;AAGnE,OAAOC,WAAW,MAAM,gBAAgB;AAExC,MAAMC,WAAW,SAASH,YAAY,CAA8B;EAElE,OAAOI,IAAI,GAAG,WAAW;EAEzBC,KAAK,GAAoBH,WAAW;EAEpC,MAAMI,QAAQA,CAACC,IAAuB,EAAEC,CAAC,EAAEC,EAAE,EAAoB;IAC/D,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAErD,OAAO,IAAIM,OAAO,CAAWC,OAAO,IAAK;MACvC,IAAIC,YAAY,GAAG,CAAC;MAEpBL,SAAS,CAACM,OAAO,CAAEC,GAAG,IAAK;QACzB,MAAMC,GAAG,GAAG,IAAIb,KAAK,CAAC,CAAC;QACvBa,GAAG,CAACC,GAAG,GAAGF,GAAG;QACbC,GAAG,CAACE,MAAM,GAAG,MAAM;UACjBL,YAAY,EAAE;UAEd,IAAIA,YAAY,KAAKL,SAAS,CAACW,MAAM,EAAE;YACrCP,OAAO,CAAC,IAAI,CAAC;UACf;QACF,CAAC;QACDI,GAAG,CAACI,OAAO,GAAG,MAAMR,OAAO,CAAC,KAAK,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,MAAMS,gBAAgBA,CAAA,EAAqB;IACzC,OAAO,KAAK;EACd;EAEA,MAAMC,cAAcA,CAAA,EAAqB;IACvC,OAAO,KAAK;EACd;EAEA,MAAMC,SAASA,CAACC,MAAmB,EAAqB;IACtD,IAAI,CAACA,MAAM,CAACC,GAAG,EAAE;MAEf,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAC1E;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAACC,GAAG,EAAE;MACvCI,OAAO,EAAEL,MAAM,CAACK;IAClB,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIJ,KAAK,CAAC,8CAA8CC,QAAQ,CAACI,MAAM,EAAE,CAAC;IAClF;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAMC,cAAc,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IAChD,MAAMI,KAAK,GAAG,MAAMC,qBAAqB,CAACJ,cAAc,CAAC;IAEzD,OAAOjC,WAAW,CAACsC,IAAI,CACrBL,cAAc,EACdG,KAAK,CAACG,KAAK,EACXH,KAAK,CAACI,MAAM,EACZb,QAAQ,CAACE,OAAO,CAACY,GAAG,CAAC,cAAc,CACrC,CAAC;EACH;AACF;AAKA,eAAeJ,qBAAqBA,CAACpB,GAAW,EAA6B;EAC3E,OAAO,IAAIN,OAAO,CAAC,CAACC,OAAO,EAAE8B,MAAM,KAAK;IACtC,MAAMN,KAAK,GAAGO,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAE3CR,KAAK,CAAClB,MAAM,GAAG,MAAMN,OAAO,CAACwB,KAAK,CAAC;IACnCA,KAAK,CAAChB,OAAO,GAAG,MAAMsB,MAAM,CAAC,IAAIhB,KAAK,CAAC,kCAAkCT,GAAG,GAAG,CAAC,CAAC;IACjFmB,KAAK,CAACnB,GAAG,GAAGA,GAAG;EACjB,CAAC,CAAC;AACJ;AAEA,eAAelB,iBAAiB,CAACE,WAAW,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}