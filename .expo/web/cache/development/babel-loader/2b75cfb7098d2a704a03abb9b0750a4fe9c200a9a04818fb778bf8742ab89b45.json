{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"blurhash\", \"thumbhash\"];\nimport { Platform } from 'expo-modules-core';\nimport resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\nimport { isImageRef } from '../utils';\nexport function isBlurhashString(str) {\n  return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\nexport function isThumbhashString(str) {\n  return str.startsWith('thumbhash:/');\n}\nexport function resolveSource(source) {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return {\n      uri: source\n    };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const {\n        blurhash,\n        thumbhash\n      } = source,\n      restSource = _objectWithoutPropertiesLoose(source, _excluded);\n    const resolved = thumbhash ? resolveThumbhashString(thumbhash) : resolveBlurhashString(blurhash);\n    return Object.assign({}, resolved, restSource);\n  }\n  return source ?? null;\n}\nexport function resolveSources(sources) {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean);\n  }\n  if (isImageRef(sources)) {\n    if (Platform.OS === 'web') {\n      return sources;\n    }\n    return sources.__expo_shared_object_id__;\n  }\n  return [resolveSource(sources)].filter(Boolean);\n}","map":{"version":3,"names":["Platform","resolveAssetSource","resolveBlurhashString","resolveThumbhashString","isImageRef","isBlurhashString","str","test","isThumbhashString","startsWith","resolveSource","source","uri","blurhash","thumbhash","restSource","_objectWithoutPropertiesLoose","_excluded","resolved","Object","assign","resolveSources","sources","Array","isArray","map","filter","Boolean","OS","__expo_shared_object_id__"],"sources":["/Users/shubhamsharma/Downloads/Ecommerce-main/node_modules/expo-image/src/utils/resolveSources.tsx"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\nimport { ImageNativeProps, ImageProps, ImageSource } from '../Image.types';\nimport { isImageRef } from '../utils';\n\nexport function isBlurhashString(str: string): boolean {\n  return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\n\n// Base64 strings will be recognized as blurhash by default (to keep compatibility),\n// interpret as thumbhash only if correct uri scheme is provided\nexport function isThumbhashString(str: string): boolean {\n  return str.startsWith('thumbhash:/');\n}\n\nexport function resolveSource(source?: ImageSource | string | number | null): ImageSource | null {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const { blurhash, thumbhash, ...restSource } = source;\n    const resolved = thumbhash\n      ? resolveThumbhashString(thumbhash)\n      : resolveBlurhashString(blurhash as string);\n    return {\n      ...resolved,\n      ...restSource,\n    };\n  }\n  return source ?? null;\n}\n\n/**\n * Resolves provided `source` prop to an array of objects expected by the native implementation.\n */\nexport function resolveSources(sources?: ImageProps['source']): ImageNativeProps['source'] {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean) as ImageSource[];\n  }\n  if (isImageRef(sources)) {\n    if (Platform.OS === 'web') {\n      return sources;\n    }\n    // @ts-expect-error\n    return sources.__expo_shared_object_id__;\n  }\n  return [resolveSource(sources)].filter(Boolean) as ImageSource[];\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAE5C,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,qBAAqB;AAEnF,SAASC,UAAU,QAAQ,UAAU;AAErC,OAAO,SAASC,gBAAgBA,CAACC,GAAW,EAAW;EACrD,OAAO,yDAAyD,CAACC,IAAI,CAACD,GAAG,CAAC;AAC5E;AAIA,OAAO,SAASE,iBAAiBA,CAACF,GAAW,EAAW;EACtD,OAAOA,GAAG,CAACG,UAAU,CAAC,aAAa,CAAC;AACtC;AAEA,OAAO,SAASC,aAAaA,CAACC,MAA6C,EAAsB;EAC/F,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAIN,gBAAgB,CAACM,MAAM,CAAC,EAAE;MAC5B,OAAOT,qBAAqB,CAACS,MAAM,CAAC;IACtC,CAAC,MAAM,IAAIH,iBAAiB,CAACG,MAAM,CAAC,EAAE;MACpC,OAAOR,sBAAsB,CAACQ,MAAM,CAAC;IACvC;IACA,OAAO;MAAEC,GAAG,EAAED;IAAO,CAAC;EACxB;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOV,kBAAkB,CAACU,MAAM,CAAC;EACnC;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,KAAKA,MAAM,EAAEE,QAAQ,IAAIF,MAAM,EAAEG,SAAS,CAAC,EAAE;IACzE,MAAM;QAAED,QAAQ;QAAEC;MAAyB,CAAC,GAAGH,MAAM;MAArBI,UAAU,GAAAC,6BAAA,CAAKL,MAAM,EAAAM,SAAA;IACrD,MAAMC,QAAQ,GAAGJ,SAAS,GACtBX,sBAAsB,CAACW,SAAS,CAAC,GACjCZ,qBAAqB,CAACW,QAAkB,CAAC;IAC7C,OAAAM,MAAA,CAAAC,MAAA,KACKF,QAAQ,EACRH,UAAU;EAEjB;EACA,OAAOJ,MAAM,IAAI,IAAI;AACvB;AAKA,OAAO,SAASU,cAAcA,CAACC,OAA8B,EAA8B;EACzF,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;IAC1B,OAAOA,OAAO,CAACG,GAAG,CAACf,aAAa,CAAC,CAACgB,MAAM,CAACC,OAAO,CAAC;EACnD;EACA,IAAIvB,UAAU,CAACkB,OAAO,CAAC,EAAE;IACvB,IAAItB,QAAQ,CAAC4B,EAAE,KAAK,KAAK,EAAE;MACzB,OAAON,OAAO;IAChB;IAEA,OAAOA,OAAO,CAACO,yBAAyB;EAC1C;EACA,OAAO,CAACnB,aAAa,CAACY,OAAO,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC;AACjD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}