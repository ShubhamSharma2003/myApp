{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\", \"source\", \"placeholder\", \"contentFit\", \"contentPosition\", \"transition\", \"fadeDuration\", \"resizeMode\", \"defaultSource\", \"loadingIndicatorSource\"],\n  _excluded2 = [\"resizeMode\"];\nvar _jsxFileName = \"/Users/shubhamsharma/Downloads/Ecommerce-main/node_modules/expo-image/src/Image.tsx\";\nimport { Platform, createSnapshotFriendlyRef } from 'expo-modules-core';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ExpoImage from './ExpoImage';\nimport ImageModule from './ImageModule';\nimport { resolveContentFit, resolveContentPosition, resolveTransition } from './utils';\nimport { resolveSource, resolveSources } from './utils/resolveSources';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet loggedDefaultSourceDeprecationWarning = false;\nlet loggedRenderingChildrenWarning = false;\nexport class Image extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.nativeViewRef = createSnapshotFriendlyRef();\n    this.containerViewRef = createSnapshotFriendlyRef();\n  }\n  getAnimatableRef = () => {\n    if (Platform.OS === 'web') {\n      return this.containerViewRef.current;\n    } else {\n      return this;\n    }\n  };\n  static Image = ImageModule.Image;\n  static async prefetch(urls, options) {\n    let cachePolicy = 'memory-disk';\n    let headers;\n    switch (typeof options) {\n      case 'string':\n        cachePolicy = options;\n        break;\n      case 'object':\n        cachePolicy = options.cachePolicy ?? cachePolicy;\n        headers = options.headers;\n        break;\n    }\n    return ImageModule.prefetch(Array.isArray(urls) ? urls : [urls], cachePolicy, headers);\n  }\n  static async clearMemoryCache() {\n    return await ImageModule.clearMemoryCache();\n  }\n  static async clearDiskCache() {\n    return await ImageModule.clearDiskCache();\n  }\n  static async getCachePathAsync(cacheKey) {\n    return await ImageModule.getCachePathAsync(cacheKey);\n  }\n  static async generateBlurhashAsync(url, numberOfComponents) {\n    return await ImageModule.generateBlurhashAsync(url, numberOfComponents);\n  }\n  async startAnimating() {\n    await this.nativeViewRef.current.startAnimating();\n  }\n  async stopAnimating() {\n    await this.nativeViewRef.current.stopAnimating();\n  }\n  static async loadAsync(source, options) {\n    const resolvedSource = resolveSource(source);\n    return await ImageModule.loadAsync(resolvedSource, options);\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        style,\n        source,\n        placeholder,\n        contentFit,\n        contentPosition,\n        transition,\n        fadeDuration,\n        resizeMode: resizeModeProp,\n        defaultSource,\n        loadingIndicatorSource\n      } = _this$props,\n      restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    const _ref = StyleSheet.flatten(style) || {},\n      {\n        resizeMode: resizeModeStyle\n      } = _ref,\n      restStyle = _objectWithoutPropertiesLoose(_ref, _excluded2);\n    const resizeMode = resizeModeProp ?? resizeModeStyle;\n    if ((defaultSource || loadingIndicatorSource) && !loggedDefaultSourceDeprecationWarning) {\n      console.warn('[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead');\n      loggedDefaultSourceDeprecationWarning = true;\n    }\n    if (restProps.children && !loggedRenderingChildrenWarning) {\n      console.warn('The <Image> component does not support children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');\n      loggedRenderingChildrenWarning = true;\n    }\n    return _jsxDEV(ExpoImage, Object.assign({}, restProps, {\n      style: restStyle,\n      source: resolveSources(source),\n      placeholder: resolveSources(placeholder ?? defaultSource ?? loadingIndicatorSource),\n      contentFit: resolveContentFit(contentFit, resizeMode),\n      contentPosition: resolveContentPosition(contentPosition),\n      transition: resolveTransition(transition, fadeDuration),\n      nativeViewRef: this.nativeViewRef,\n      containerViewRef: this.containerViewRef\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","_excluded2","_jsxFileName","Platform","createSnapshotFriendlyRef","React","StyleSheet","ExpoImage","ImageModule","resolveContentFit","resolveContentPosition","resolveTransition","resolveSource","resolveSources","jsxDEV","_jsxDEV","loggedDefaultSourceDeprecationWarning","loggedRenderingChildrenWarning","Image","PureComponent","constructor","props","nativeViewRef","containerViewRef","getAnimatableRef","OS","current","prefetch","urls","options","cachePolicy","headers","Array","isArray","clearMemoryCache","clearDiskCache","getCachePathAsync","cacheKey","generateBlurhashAsync","url","numberOfComponents","startAnimating","stopAnimating","loadAsync","source","resolvedSource","render","_this$props","style","placeholder","contentFit","contentPosition","transition","fadeDuration","resizeMode","resizeModeProp","defaultSource","loadingIndicatorSource","restProps","_ref","flatten","resizeModeStyle","restStyle","console","warn","children","Object","assign","fileName","lineNumber","columnNumber"],"sources":["/Users/shubhamsharma/Downloads/Ecommerce-main/node_modules/expo-image/src/Image.tsx"],"sourcesContent":["'use client';\n\nimport { Platform, createSnapshotFriendlyRef } from 'expo-modules-core';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport ExpoImage from './ExpoImage';\nimport {\n  ImageLoadOptions,\n  ImagePrefetchOptions,\n  ImageProps,\n  ImageRef,\n  ImageSource,\n} from './Image.types';\nimport ImageModule from './ImageModule';\nimport { resolveContentFit, resolveContentPosition, resolveTransition } from './utils';\nimport { resolveSource, resolveSources } from './utils/resolveSources';\n\nlet loggedDefaultSourceDeprecationWarning = false;\nlet loggedRenderingChildrenWarning = false;\n\nexport class Image extends React.PureComponent<ImageProps> {\n  nativeViewRef;\n  containerViewRef;\n  constructor(props) {\n    super(props);\n    this.nativeViewRef = createSnapshotFriendlyRef();\n    this.containerViewRef = createSnapshotFriendlyRef();\n  }\n\n  // Reanimated support on web\n  getAnimatableRef = () => {\n    if (Platform.OS === 'web') {\n      return this.containerViewRef.current;\n    } else {\n      return this;\n    }\n  };\n\n  /**\n   * @hidden\n   */\n  static Image = ImageModule.Image;\n\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param {ImagePrefetchOptions['cachePolicy']} cachePolicy - The cache policy for prefetched images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(\n    urls: string | string[],\n    cachePolicy?: ImagePrefetchOptions['cachePolicy']\n  ): Promise<boolean>;\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param options - Options for prefetching images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(urls: string | string[], options?: ImagePrefetchOptions): Promise<boolean>;\n  static async prefetch(\n    urls: string | string[],\n    options?: ImagePrefetchOptions['cachePolicy'] | ImagePrefetchOptions\n  ): Promise<boolean> {\n    let cachePolicy: ImagePrefetchOptions['cachePolicy'] = 'memory-disk';\n    let headers: ImagePrefetchOptions['headers'];\n    switch (typeof options) {\n      case 'string':\n        cachePolicy = options;\n        break;\n      case 'object':\n        cachePolicy = options.cachePolicy ?? cachePolicy;\n        headers = options.headers;\n        break;\n    }\n\n    return ImageModule.prefetch(Array.isArray(urls) ? urls : [urls], cachePolicy, headers);\n  }\n\n  /**\n   * Asynchronously clears all images stored in memory.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearMemoryCache(): Promise<boolean> {\n    return await ImageModule.clearMemoryCache();\n  }\n\n  /**\n   * Asynchronously clears all images from the disk cache.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearDiskCache(): Promise<boolean> {\n    return await ImageModule.clearDiskCache();\n  }\n\n  /**\n   * Asynchronously checks if an image exists in the disk cache and resolves to\n   * the path of the cached image if it does.\n   * @param cacheKey - The cache key for the requested image. Unless you have set\n   * a custom cache key, this will be the source URL of the image.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to the path of the cached image. It will resolve\n   * to `null` if the image does not exist in the cache.\n   */\n  static async getCachePathAsync(cacheKey: string): Promise<string | null> {\n    return await ImageModule.getCachePathAsync(cacheKey);\n  }\n\n  /**\n   * Asynchronously generates a [Blurhash](https://blurha.sh) from an image.\n   * @param url - The URL of the image to generate a blurhash from.\n   * @param numberOfComponents - The number of components to encode the blurhash with.\n   * Must be between 1 and 9. Defaults to `[4, 3]`.\n   * @platform ios\n   * @return A promise resolving to the blurhash string.\n   */\n  static async generateBlurhashAsync(\n    url: string,\n    numberOfComponents: [number, number] | { width: number; height: number }\n  ): Promise<string | null> {\n    return await ImageModule.generateBlurhashAsync(url, numberOfComponents);\n  }\n\n  /**\n   * Asynchronously starts playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async startAnimating(): Promise<void> {\n    await this.nativeViewRef.current.startAnimating();\n  }\n\n  /**\n   * Asynchronously stops the playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async stopAnimating(): Promise<void> {\n    await this.nativeViewRef.current.stopAnimating();\n  }\n\n  /**\n   * Loads an image from the given source to memory and resolves to\n   * an object that references the native image instance.\n   * @platform android\n   * @platform ios\n   * @platform web\n   */\n  static async loadAsync(\n    source: ImageSource | string,\n    options?: ImageLoadOptions\n  ): Promise<ImageRef> {\n    const resolvedSource = resolveSource(source) as ImageSource;\n    return await ImageModule.loadAsync(resolvedSource, options);\n  }\n\n  render() {\n    const {\n      style,\n      source,\n      placeholder,\n      contentFit,\n      contentPosition,\n      transition,\n      fadeDuration,\n      resizeMode: resizeModeProp,\n      defaultSource,\n      loadingIndicatorSource,\n      ...restProps\n    } = this.props;\n\n    const { resizeMode: resizeModeStyle, ...restStyle } = StyleSheet.flatten(style) || {};\n    const resizeMode = resizeModeProp ?? resizeModeStyle;\n\n    if ((defaultSource || loadingIndicatorSource) && !loggedDefaultSourceDeprecationWarning) {\n      console.warn(\n        '[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead'\n      );\n      loggedDefaultSourceDeprecationWarning = true;\n    }\n\n    if (restProps.children && !loggedRenderingChildrenWarning) {\n      console.warn(\n        'The <Image> component does not support children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.'\n      );\n      loggedRenderingChildrenWarning = true;\n    }\n\n    return (\n      <ExpoImage\n        {...restProps}\n        style={restStyle}\n        source={resolveSources(source)}\n        placeholder={resolveSources(placeholder ?? defaultSource ?? loadingIndicatorSource)}\n        contentFit={resolveContentFit(contentFit, resizeMode)}\n        contentPosition={resolveContentPosition(contentPosition)}\n        transition={resolveTransition(transition, fadeDuration)}\n        nativeViewRef={this.nativeViewRef}\n        containerViewRef={this.containerViewRef}\n      />\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}